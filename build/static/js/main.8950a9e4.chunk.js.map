{"version":3,"sources":["FIXED_FRONTEND_VARIABLES.js","Components/hover.js","Sections/Database.js","Helpers/RenderDatabase.js","Sections/SubmitChallenge.js","Components/DeleteProfileModal.js","Components/UserDetails.js","Sections/Login.js","Sections/ToggleInfoBar.js","Pages/MainPage.js","Pages/LichessInfo.js","Pages/EscrowInfo.js","App.js","index.js"],"names":["BASE_URL","HoverPopup","_ref","text","children","isHovered","setHovered","useState","React","createElement","onMouseEnter","handleMouseEnter","onMouseLeave","handleMouseLeave","style","position","cursor","className","ChessChallengesTable","challenges","currentUserUplandID","cancelledChallenge","setCancelledChallenge","deletedChallege","setDeletedChallege","nothingRefunded","setNothingRefunded","processing","setProcessing","unableToDelete","setUnableToDelete","blankUplandID","setBlankUplandID","visitorError","setVisitorError","invalidBearerError","setInvalidBearerError","DeleteChallenge","async","res","axios","post","baseUrl","link","data","setTimeout","error","console","navigate","useNavigate","ViewEscrow","state","escrowId","Fragment","map","challenge","index","key","name","uplandID","onClick","lichessId","ViewLichess","lichessID","opponentRating","wageramt","href","target","rel","accepted","window","open","AcceptChallenge","readyStatus","accepter","CancelChallenge","marginTop","RenderDatabase","challengeTable","array","challengeData","i","length","push","SubmitChallenge","finalUserUplandID","setLoginOpen","setCreateOpen","setIsGenerate","setChallengeOpen","isChallengeOpen","needLogin","setNeedLogin","challengeSubmitted","setChallengeSubmitted","challengeError","setChallengeError","rated","setRated","wager","setWager","closeChallengeModal","openChallengeModal","htmlFor","type","id","value","onChange","e","upland","submitDetails","Modal","setAppElement","DeleteProfileModal","isDeleteOpen","setIsDeleteOpen","uplandIDRemove","setUplandID","passwordRemove","setPassword","deleteProfile","isOpen","onRequestClose","contentLabel","overlay","backgroundColor","content","top","left","right","bottom","marginRight","transform","width","height","openDeleteProfileModal","UserDetails","currentUserLichessID","justifyContent","UserSection","setFinalUserUplandID","setChallengesData","authKey","setAuth","setLichessID","password","setCurrentUserUplandID","setCurrentUserLichessID","isLoginOpen","isCreateOpen","LogoutButton","setLogoutButton","isGenerate","profileCreated","setProfileCreated","loggedInNotif","setLoggedIn","CreateError","setCreateError","LoginError","setLoginError","LichessError","setLichessError","handleLogin","realPassword","closeLoginModal","closeCreateProfileModal","resetColor","setResetColor","useEffect","storedUplandID","JSON","parse","localStorage","getItem","storedPassword","log","setItem","stringify","display","alignItems","marginLeft","challengeTableData","onMouseDown","handleMouseDown","onMouseUp","handleMouseUp","ToggleBar","infosection","setInfoSection","toggleInfoSection","aria-label","role","MainPage","resetChallenges","LichessPage","useLocation","stats","setStats","deviation","setDeviation","rating","setRating","games","setGames","regenerateStats","lichessData","dev","rd","handleBackToHome","EscrowPage","escrow","setEscrow","assets","setAssets","status","setStatus","upx","setUpx","regenerateEscrow","escrowData","colSpan","asset","amount","ownerEosId","App","Router","Routes","Route","path","element","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.8950a9e4.chunk.js","sourcesContent":["export const BASE_URL = 'http://127.0.0.1:4000'","import React, { useState } from 'react';\r\nimport './../App.css'\r\n\r\nconst HoverPopup = ({ text, children }) => {\r\n    const [isHovered, setHovered] = useState(false);\r\n  \r\n    const handleMouseEnter = () => { setHovered(true); };\r\n    const handleMouseLeave = () => { setHovered(false); };\r\n  \r\n    return (\r\n      <div\r\n        onMouseEnter={handleMouseEnter}\r\n        onMouseLeave={handleMouseLeave}\r\n        style={{ position: 'relative', cursor: 'pointer'}}\r\n      >        \r\n        {children}\r\n\r\n        {isHovered && (\r\n          <div className='hover'> \r\n            {text} \r\n          </div>\r\n        )}\r\n\r\n      </div>\r\n    );\r\n  };\r\n\r\nexport {HoverPopup}","import React, { useState } from 'react';\r\nimport { BrowserRouter as Router, useNavigate } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\nimport {BASE_URL as baseUrl} from \"../FIXED_FRONTEND_VARIABLES.js\"\r\nimport './../App.css'\r\n\r\nimport { HoverPopup } from '../Components/hover.js'\r\n\r\n\r\n\r\nconst ChessChallengesTable = ({ challenges, currentUserUplandID}) => {\r\n    // const [acceptedChallenge, setAcceptedChallenges] = useState([]);\r\n    const [cancelledChallenge, setCancelledChallenge] = useState(false);\r\n    \r\n    const [deletedChallege, setDeletedChallege] = useState(false);\r\n    const [nothingRefunded, setNothingRefunded] = useState(false);\r\n    const [processing, setProcessing] = useState(false);\r\n    const [unableToDelete, setUnableToDelete] = useState(false);\r\n    \r\n    const [blankUplandID, setBlankUplandID] = useState(false);\r\n    const [visitorError, setVisitorError] = useState(false);\r\n    const [invalidBearerError, setInvalidBearerError] = useState(false);\r\n    \r\n    \r\n\r\n    const AcceptChallenge = async (link, index) => {\r\n      if (currentUserUplandID === \"BLANK\") {\r\n        setBlankUplandID(true)\r\n        setTimeout(() => setBlankUplandID(false), 3000);\r\n        return\r\n      }\r\n      \r\n      try {\r\n        const res = await axios.post(baseUrl + '/accepted', { link, currentUserUplandID});\r\n\r\n        if (res.data === -1) {\r\n          setVisitorError(true)\r\n          setTimeout(() => setVisitorError(false), 5000);\r\n          return\r\n        } else if (res.data === -2) {\r\n          setInvalidBearerError(true)\r\n          setTimeout(() => setInvalidBearerError(false), 5000);\r\n          return\r\n        }\r\n\r\n        window.open(link, '_blank');\r\n        // setAcceptedChallenges([acceptedChallenge, index]);\r\n      } catch (error) {\r\n        console.error('Error:', error);\r\n      }\r\n    };\r\n  \r\n    const CancelChallenge = async (link, index) => {\r\n      // const updatedAcceptedChallenges = acceptedChallenge.filter((acceptedIndex) => acceptedIndex !== index);\r\n      \r\n      try {\r\n        await axios.post(baseUrl + '/cancel', { link });\r\n        // setAcceptedChallenges(updatedAcceptedChallenges);\r\n\r\n        setCancelledChallenge(true)\r\n        setTimeout(() => setCancelledChallenge(false), 5000);\r\n  \r\n      } catch (error) {\r\n        console.error('Error:', error);\r\n      }\r\n    };\r\n  \r\n    const DeleteChallenge = async (link) => {\r\n      \r\n      try {\r\n        const res = await axios.post(baseUrl + '/delete', { link });\r\n\r\n        if (res.data === 'Success') {\r\n          setDeletedChallege(true)\r\n          setTimeout(() => setDeletedChallege(false), 5000);\r\n        } else if (res.data === \"Nothing to refund\") {\r\n          setNothingRefunded(true)\r\n          setTimeout(() => setNothingRefunded(false), 5000);\r\n        } else if (res.data === \"Processing\") {\r\n          setProcessing(true)\r\n          setTimeout(() => setProcessing(false), 5000);\r\n        } else if (res.data === \"error\") {\r\n          setUnableToDelete(true)\r\n          setTimeout(() => setUnableToDelete(false), 5000);\r\n        }\r\n  \r\n      } catch (error) {\r\n        console.error('Error:', error);\r\n      }\r\n    };\r\n\r\n\r\n    // Go to different pages by the click of a button\r\n    const navigate = useNavigate();\r\n\r\n    const ViewEscrow = async (escrowId) => {\r\n      navigate('/escrow', { state: {escrowId, currentUserUplandID} });\r\n    };\r\n\r\n    const ViewLichess = async (lichessId) => {\r\n      navigate('/lichess', { state: {lichessId, currentUserUplandID} });\r\n    };\r\n  \r\n    \r\n    return (\r\n      <>\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th>Challenge</th>\r\n              <th>Upland ID</th>\r\n              <th>Lichess ID</th>\r\n              <th>Lichess Rating</th>\r\n              <th>Wager</th>\r\n              <th>Link</th>\r\n              <th>Availability</th>\r\n              <th>Accept Challenge</th>\r\n              <th>Escrow Status</th>\r\n            </tr>\r\n          </thead>\r\n  \r\n          <tbody>\r\n            {challenges.map((challenge, index) => (\r\n              <tr key={index}> \r\n                <td> {challenge.name} </td>           \r\n                \r\n                {challenge.uplandID === -1 ? (\r\n                  <td>\r\n                    <HoverPopup text=\"**No UplandID associated w/ this Lichess account!** \">\r\n                      <div className='textOutliner warning'>\r\n                        N/A\r\n                      </div>\r\n                    </HoverPopup>\r\n                  </td>\r\n                ) : (\r\n                  <td> {challenge.uplandID} </td>\r\n                )}\r\n\r\n\r\n                <td> \r\n                  <div \r\n                    onClick={() => ViewLichess(challenge.lichessID)}\r\n                    className='textOutliner lichess'\r\n                  >\r\n                    {challenge.lichessID} \r\n                  </div>\r\n                </td>\r\n\r\n\r\n                <td> {challenge.opponentRating} </td>\r\n                <td> {challenge.wageramt} </td>\r\n  \r\n                <td>\r\n                  <a href={challenge.link} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                    ENTER GAME\r\n                  </a>\r\n                </td>\r\n  \r\n                <td >\r\n                  {/* acceptedChallenge.includes(index) && */}\r\n                  {(challenge.accepted === \"YES\") && (\r\n                    <span className='textOutliner accepted'>\r\n                      Accepted\r\n                    </span>\r\n                  )} \r\n                  \r\n                  {(challenge.accepted === \"NO\") && (\r\n                    <span className='textOutliner available'>\r\n                      Available\r\n                    </span>\r\n                  )}\r\n\r\n                  {(challenge.accepted === \"COMPLETED\") && (\r\n                    <span className='textOutliner completed'>\r\n                      COMPLETED\r\n                    </span>\r\n                  )}\r\n                </td>\r\n  \r\n                <td>\r\n\r\n                {/* {!acceptedChallenge.includes(index) && } */}\r\n                  {challenge.accepted === \"NO\" && !(currentUserUplandID === challenge.uplandID) && !(challenge.uplandID === -1) && ( \r\n                    <button \r\n                      onClick={() => AcceptChallenge(challenge.link, index)}\r\n                      className='acceptButton'\r\n                    >\r\n                      Accept\r\n                    </button>\r\n                  )}\r\n\r\n                {/* !acceptedChallenge.includes(index) && */}\r\n                  {challenge.accepted === \"NO\" && challenge.uplandID === currentUserUplandID &&(\r\n                    <button\r\n                      onClick={() => DeleteChallenge(challenge.link, challenge.accepted, index)}\r\n                      className='deleteButton'\r\n                    >\r\n                      Delete\r\n                    </button>\r\n                  )}\r\n\r\n                  {challenge.readyStatus === \"NO\" && challenge.accepted !== \"NO\" && challenge.uplandID === currentUserUplandID &&(\r\n                    <button\r\n                      onClick={() => DeleteChallenge(challenge.link, challenge.accepted, index)}\r\n                      className='deleteButton'\r\n                    >\r\n                      Delete\r\n                    </button>\r\n                  )}\r\n                  \r\n                {/* acceptedChallenge.includes(index) ||  */}\r\n                  {challenge.readyStatus === \"NO\" && (challenge.accepted === \"YES\") && (challenge.accepter === currentUserUplandID || challenge.uplandID === currentUserUplandID)  && (\r\n                    <button\r\n                      onClick={() => CancelChallenge(challenge.link, index)}\r\n                      className='cancelButton'\r\n                      style= {{marginTop: \"5px\"}}\r\n                    >\r\n                      Cancel\r\n                    </button>\r\n                  )}\r\n\r\n                  {challenge.uplandID === -1 && (\r\n                    <HoverPopup text=\"Once wager transactions on the escrow is confirmed on the EOS blockchain, it will be resolved\">\r\n                      <span className='textOutliner completed'>\r\n                        COMPLETED\r\n                      </span>\r\n                    </HoverPopup>\r\n                    \r\n                  )}\r\n                </td>\r\n\r\n\r\n                <td> \r\n                    {challenge.readyStatus === \"YES\" && (\r\n                      <button \r\n                        onClick={() => ViewEscrow(challenge.escrowId)}\r\n                        className='textOutliner ready'\r\n                      >\r\n                        GOOD TO GO\r\n                      </button>\r\n                    )}  \r\n                    \r\n                    {challenge.readyStatus === \"NO\" && (\r\n                      <div \r\n                        onClick={() => ViewEscrow(challenge.escrowId)}\r\n                        className='textOutliner ready'\r\n                      >\r\n                        ESCROW NOT READY\r\n                      </div>\r\n                    )}\r\n\r\n                    {challenge.readyStatus === \"RESOLVING\" && (\r\n                      <div \r\n                        onClick={() => ViewEscrow(challenge.escrowId)}\r\n                        className='textOutliner ready'\r\n                      >\r\n                        RESOLVING\r\n                      </div>\r\n                    )}\r\n                </td>\r\n  \r\n              </tr>\r\n            ))} \r\n          </tbody>\r\n        </table>\r\n  \r\n        {deletedChallege && (\r\n          <div className={`notification notification-success`}>\r\n            <div className=\"notification-content\">\r\n              Challenge Successfully Deleted & Escrow Refunded!\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {nothingRefunded && (\r\n          <div className={`notification notification-success`}>\r\n            <div className=\"notification-content\">\r\n              Challenge Successfully Deleted...but there was nothing in the escrow to refund\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {processing && (\r\n          <div className={`notification notification-error`}>\r\n            <div className=\"notification-content\">\r\n              Cannot delete...transactions are still processing\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {unableToDelete && (\r\n          <div className={`notification notification-error`}>\r\n            <div className=\"notification-content\">\r\n              Unknown Error\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {blankUplandID && (\r\n          <div className={`notification notification-error`}>\r\n            <div className=\"notification-content\">\r\n              Need to be logged in to accept!\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {visitorError && (\r\n          <div className={`notification notification-error`}>\r\n            <div className=\"notification-content\">\r\n              You are a visitor...need to be UPLANDER LEVEL AT LEAST to accept!\r\n            </div>\r\n          </div>\r\n        )}\r\n        \r\n\r\n        {cancelledChallenge && (\r\n          <div className={`notification notification-success`}>\r\n            <div className=\"notification-content\">\r\n              Challenge Cancelled!\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {invalidBearerError && (\r\n            <div className={`notification notification-error`}>\r\n            BEARER TOKEN IS INVALID\r\n            </div>\r\n        )}\r\n\r\n      </>\r\n    );\r\n  };  \r\n\r\nexport { ChessChallengesTable }","import axios from 'axios';\r\nimport './../App.css'\r\n\r\nimport {BASE_URL as baseUrl} from \"../FIXED_FRONTEND_VARIABLES\"\r\n\r\n\r\nconst RenderDatabase = async () => {\r\n    try {\r\n      const response = await axios.post(baseUrl + '/database');\r\n      // console.log(response);\r\n      \r\n      const challengeTable = response.data.array;\r\n      const challengeData = []\r\n\r\n      if (challengeTable != null) {\r\n        for (let i = 0; i < challengeTable.length; i++) {\r\n          let data = {\r\n            name: 'Challenge ' + (i + 1),\r\n            \r\n            lichessID: challengeTable[i][0],\r\n            opponentRating: challengeTable[i][1],\r\n            wageramt: challengeTable[i][2],\r\n            link: challengeTable[i][3],\r\n            uplandID: challengeTable[i][4],\r\n            accepted: challengeTable[i][5],\r\n            accepter: challengeTable[i][6],\r\n            readyStatus: challengeTable[i][7],\r\n            escrowId: challengeTable[i][8]\r\n          }\r\n  \r\n          challengeData.push(data)\r\n        }\r\n      }\r\n  \r\n      return challengeData\r\n    } catch (error) {\r\n      console.error('Error processing button click:', error);\r\n      return RenderDatabase()\r\n    }\r\n  };\r\n\r\nexport {RenderDatabase};\r\n","import React, { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nimport {BASE_URL as baseUrl} from \"../FIXED_FRONTEND_VARIABLES\"\r\nimport './../App.css'\r\n\r\n\r\nconst submitDetails = async (rated, wager, upland) => {\r\n    try {\r\n      const response = await axios.post(baseUrl + '/submit-details', {\r\n        rated, \r\n        wager,\r\n        upland\r\n      });\r\n            \r\n      return response.data\r\n    } catch (error) {\r\n      console.error('Error:', error);\r\n    }\r\n};\r\n\r\nconst SubmitChallenge = ({finalUserUplandID, setLoginOpen, setCreateOpen, setIsGenerate, setChallengeOpen, isChallengeOpen}) => {\r\n    const [needLogin, setNeedLogin] = useState(false)\r\n    const [challengeSubmitted, setChallengeSubmitted] = useState(false);\r\n    const [challengeError, setChallengeError] = useState(\"-1\");\r\n    const [visitorError, setVisitorError] = useState(false);\r\n    const [invalidBearerError, setInvalidBearerError] = useState(false);\r\n    \r\n    const [rated, setRated] = useState('');\r\n    const [wager, setWager] = useState('');\r\n    \r\n\r\n    const handleChallengeSubmit = async () => {\r\n        const res = await submitDetails(rated, wager, finalUserUplandID);\r\n        \r\n        if (res === -1 || res === -2 || res === -3 || res === -4) {\r\n          setChallengeError(res);\r\n          setTimeout(() => setChallengeError(1), 5000);\r\n        } else if (res === -5) {\r\n          setInvalidBearerError(true);\r\n          setTimeout(() => setInvalidBearerError(false), 5000);\r\n        } else if (res === -6) {\r\n          setVisitorError(true);\r\n          setTimeout(() => setVisitorError(false), 5000);\r\n        } else {\r\n          setChallengeSubmitted(true);\r\n          setTimeout(() => setChallengeSubmitted(false), 5000);\r\n          closeChallengeModal();\r\n          window.open(res, '_blank');\r\n        }\r\n    }; \r\n\r\n    const openChallengeModal = () => {\r\n        if (finalUserUplandID === \"BLANK\") {\r\n          setNeedLogin(true)\r\n          setTimeout(() => setNeedLogin(false), 3000);\r\n          return \r\n        }\r\n\r\n        setChallengeOpen(!isChallengeOpen);\r\n        setLoginOpen(false)\r\n        setCreateOpen(false);\r\n        setIsGenerate(true)\r\n    };\r\n\r\n    const closeChallengeModal = () => {\r\n        setChallengeOpen(false);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <button onClick={openChallengeModal} className='createChallengeButton'> \r\n                CREATE CHALLENGE \r\n            </button>\r\n\r\n            {isChallengeOpen && (\r\n                <div className='modal modalChallenge'>\r\n                <span className=\"close\" onClick={closeChallengeModal}> &times; </span>\r\n                <h2>Enter Your Challenge Details! </h2>\r\n                \r\n                <label htmlFor=\"name\">Rated? </label>\r\n                <input type=\"text\" id=\"name\" value={rated} onChange={(e) => setRated(e.target.value)} />\r\n                <br />\r\n                \r\n                <label htmlFor=\"name\">Wager? </label>\r\n                <input type=\"text\" id=\"wager\" value={wager} className='user-input' onChange={(e) => setWager(e.target.value)} />\r\n                <br />\r\n                \r\n                <button onClick={handleChallengeSubmit} className='submitButton'>Submit</button>\r\n                </div>\r\n            )}\r\n\r\n            {needLogin && (\r\n                <div className={`notification notification-error`}>\r\n                Need to be logged in!\r\n                </div>\r\n            )}\r\n            \r\n            {challengeSubmitted && (\r\n                <div className={`notification notification-success`}>\r\n                Challenge Submitted!!\r\n                </div>\r\n            )}\r\n\r\n            {challengeError === -1 && (\r\n                <div className={`notification notification-error`}>\r\n                <div >\r\n                    Invalid Upland ID...\r\n                </div>\r\n                </div>\r\n            )}\r\n\r\n            {challengeError === -2 && (\r\n                <div className={`notification notification-error`}>\r\n                Invalid Rating...\r\n                </div>\r\n            )}\r\n\r\n            {challengeError === -3 && (\r\n                <div className={`notification notification-error`}>\r\n                Invalid Wager...\r\n                </div>\r\n            )}\r\n\r\n            {challengeError === -4 && (\r\n                <div className={`notification notification-error`}>\r\n                Sorry, but the amount you wagered exceeds your balance!\r\n                </div>\r\n            )}\r\n\r\n            {visitorError && (\r\n                <div className={`notification notification-error`}>\r\n                YOUR LEVEL IS VISITOR! HAVE TO BE AT LEAST AN \"UPLANDER\" TO CREATE A CHALLENGE!\r\n                </div>\r\n            )}\r\n\r\n            {invalidBearerError && (\r\n                <div className={`notification notification-error`}>\r\n                Unknown error...most likely cause is YOUR BEARER TOKEN IS INVALID. If this keeps popping up, you might need to create a new profile. Please disconnect from this app and reconnect w/ a new code.\r\n                </div>\r\n            )}\r\n        </> \r\n    )\r\n}\r\n\r\nexport {SubmitChallenge}\r\n","import React, { useState} from 'react';\r\nimport axios from 'axios';\r\nimport Modal from 'react-modal';\r\n\r\nimport {BASE_URL as baseUrl} from \"../FIXED_FRONTEND_VARIABLES\"\r\n\r\n\r\n// FIX THIS: CLEAN THIS PAGE UP\r\nModal.setAppElement('#root');\r\n\r\nconst DeleteProfileModal = ({isDeleteOpen, setIsDeleteOpen}) => {\r\n\r\n    const [uplandIDRemove, setUplandID] = useState('');\r\n    const [passwordRemove, setPassword] = useState('');\r\n\r\n    const openDeleteProfileModal = () => {\r\n        setIsDeleteOpen(!isDeleteOpen);\r\n    };\r\n\r\n    const deleteProfile = async () => {\r\n        await axios.post(baseUrl + '/deleteProfile', {uplandIDRemove, passwordRemove});\r\n        \r\n        setIsDeleteOpen(!isDeleteOpen);\r\n    }\r\n\r\n    return (\r\n        <Modal\r\n            isOpen={isDeleteOpen}\r\n            onRequestClose={deleteProfile}\r\n            contentLabel=\"Create Profile Modal\"\r\n            style={{\r\n            overlay: {\r\n                backgroundColor: 'rgba(0, 0, 0, 0.5)',\r\n            },\r\n            content: {\r\n                top: '50%',\r\n                left: '50%',\r\n                right: 'auto',\r\n                bottom: 'auto',\r\n                marginRight: '-50%',\r\n                transform: 'translate(-50%, -50%)',\r\n                width: '500px', // Adjust the width as needed\r\n                height: '500px', // Adjust the height as needed\r\n            },\r\n            }}\r\n        >\r\n            <span className=\"close\" onClick={openDeleteProfileModal}>\r\n            &times;\r\n            </span>\r\n            <div className=\"smallHeader\">Delete Profile</div>\r\n\r\n            <br/>\r\n            <label className=' important' htmlFor=\"create-username\">Upland ID: </label>\r\n            <input type=\"text\" id=\"create-username\" value={uplandIDRemove} className='user-input' onChange={(e) => setUplandID(e.target.value)} />\r\n            <br />\r\n\r\n            <label htmlFor=\"login-password\">Password: </label>\r\n            <input type=\"password\" id=\"login-password\" value={passwordRemove} className='user-input' onChange={(e) => setPassword(e.target.value)} />\r\n            <br />\r\n\r\n            <button onClick={deleteProfile} className=\"submitButton\"> Submit </button>\r\n\r\n        </Modal>\r\n  );\r\n};\r\n\r\nexport {DeleteProfileModal}","import React from 'react';\r\n\r\nconst UserDetails = ({ currentUserUplandID, currentUserLichessID }) => {\r\n  return (\r\n    <div style={{ marginRight: '20%', justifyContent: 'space-between' }}>\r\n      <div className=\"detail\">\r\n        <div className=\"detail detail-box\">\r\n          Registered Upland ID:\r\n        </div>\r\n        <div className=\"detail detail-value\" style={{ marginRight: '25px' }}>\r\n          {currentUserUplandID}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"detail\">\r\n        <div className=\"detail detail-box\">\r\n          Registered Lichess ID:\r\n        </div>\r\n        <div className=\"detail detail-value\">\r\n          {currentUserLichessID}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport {UserDetails};","import axios from 'axios';\r\nimport React, { useState, useEffect} from 'react';\r\n\r\nimport {BASE_URL as baseUrl} from \"../FIXED_FRONTEND_VARIABLES.js\"\r\nimport './../App.css'\r\n\r\n\r\nimport { HoverPopup } from '../Components/hover';\r\n\r\nimport { SubmitChallenge } from './SubmitChallenge.js';\r\nimport { RenderDatabase } from '../Helpers/RenderDatabase.js';\r\n\r\nimport { DeleteProfileModal } from '../Components/DeleteProfileModal';\r\nimport { UserDetails } from '../Components/UserDetails';\r\n\r\n\r\nconst UserSection = ({setFinalUserUplandID, setChallengesData}) => {\r\n    // const [isDataLoading, setIsDataLoading] = useState(false); // Need to work on \r\n  \r\n    const [authKey, setAuth] = useState('')\r\n    const [uplandID, setUplandID] = useState('');\r\n    const [lichessID, setLichessID] = useState('');\r\n    const [password, setPassword] = useState('');\r\n\r\n    const [currentUserUplandID, setCurrentUserUplandID] = useState('BLANK');\r\n    const [currentUserLichessID, setCurrentUserLichessID] = useState('BLANK');\r\n\r\n    const [isChallengeOpen, setChallengeOpen] = useState(false);\r\n    const [isDeleteOpen, setIsDeleteOpen] = useState(false);\r\n    const [isLoginOpen, setLoginOpen] = useState(false);\r\n    const [isCreateOpen, setCreateOpen] = useState(false);\r\n\r\n    const [LogoutButton, setLogoutButton] = useState(false)\r\n    const [isGenerate, setIsGenerate] = useState(true)\r\n\r\n    const [profileCreated, setProfileCreated] = useState(false);\r\n    const [loggedInNotif, setLoggedIn] = useState(false);\r\n    const [CreateError, setCreateError] = useState(\"default\")\r\n    const [LoginError, setLoginError] = useState(false)\r\n    const [LichessError, setLichessError] = useState(false)\r\n\r\n    setFinalUserUplandID(currentUserUplandID)\r\n\r\n    \r\n    // Create Profile\r\n    const handleCreateProfile = async () => {\r\n      const res = (await axios.post(baseUrl + '/credentials', {uplandID, lichessID, password})).data;\r\n  \r\n      if (res === \"same\") {\r\n        setCreateError(res)\r\n        setTimeout(() => setCreateError(\"default\"), 3000);\r\n      } else if (res === \"wrong password\") {\r\n        setProfileCreated(res)\r\n        setTimeout(() => setProfileCreated(\"default\"), 3000);\r\n      } else if (res === \"replaced\") {\r\n        setProfileCreated(res)\r\n        setTimeout(() => setProfileCreated(\"default\"), 3000);\r\n        closeCreateProfileModal();\r\n        handleLogin()\r\n      } else if (res === \"no profile found\") {\r\n        setCreateError(res)\r\n        setTimeout(() => setCreateError(\"default\"), 3000);\r\n      } else if (res === \"invalid lichess\") {\r\n        setLichessError(res)\r\n        setTimeout(() => setLichessError(\"default\"), 3000);\r\n      } else if (res === \"success\") {\r\n        setProfileCreated(res)\r\n        setTimeout(() => setProfileCreated(\"default\"), 3000);\r\n        closeCreateProfileModal();\r\n        handleLogin()\r\n      }\r\n    };\r\n\r\n    // Delete Profile\r\n    const deleteProfile = () => {\r\n      setIsDeleteOpen(!isDeleteOpen);\r\n    };\r\n\r\n\r\n\r\n    // Login\r\n    const handleLogin = async () => {\r\n      let realPassword = (await axios.post(baseUrl +'/password', {uplandID})).data;\r\n\r\n      if (password === realPassword && realPassword !== -1) {\r\n          \r\n        setLoggedIn(true)\r\n        setTimeout(() => setLoggedIn(false), 3000)      \r\n\r\n        let lichessID = (await axios.post(baseUrl + '/getLichessID', {uplandID})).data;\r\n  \r\n        setCurrentUserUplandID(uplandID)\r\n        setCurrentUserLichessID(lichessID)\r\n\r\n        setLogoutButton(true)///\r\n        closeLoginModal();\r\n\r\n      } else {\r\n        setLoginError(true)\r\n        setTimeout(() => setLoginError(false), 3000);\r\n      }\r\n\r\n      setPassword(\"\")\r\n      setUplandID(\"\")\r\n      setLichessID(\"\")\r\n    };\r\n\r\n    // Logout\r\n    const Logout = async () => {\r\n      setCurrentUserUplandID(\"BLANK\") \r\n      setCurrentUserLichessID(\"BLANK\") \r\n      setLogoutButton(false)\r\n      setPassword(\"\")\r\n      setUplandID(\"\")\r\n    }\r\n\r\n\r\n    // Generate \"Authentication Code\"\r\n    const getAuthCode = async () => {      \r\n      const res = (await axios.post(baseUrl + \"/auth\"))\r\n\r\n      setAuth(res.data)\r\n      setIsGenerate(false)\r\n    }\r\n\r\n\r\n    // Open & Close Modals\r\n    const openCreateProfileModal = async () => {\r\n      setCreateOpen(!isCreateOpen);\r\n      setIsGenerate(true)\r\n      \r\n      setLoginOpen(false)\r\n      setChallengeOpen(false)\r\n    };\r\n  \r\n    const closeCreateProfileModal = async () => {\r\n      setCreateOpen(false);\r\n      setIsGenerate(true)\r\n    };\r\n  \r\n\r\n    const openLoginModal = async () => {\r\n      setLoginOpen(!isLoginOpen);\r\n      setCreateOpen(false);\r\n      setIsGenerate(true)\r\n\r\n      setChallengeOpen(false)\r\n    };\r\n  \r\n    const closeLoginModal = () => {\r\n      setLoginOpen(false);\r\n    };\r\n  \r\n\r\n\r\n    // Change Reset Button Color On Click (FIX THIS: Make this a component)\r\n    const [resetColor, setResetColor] = useState(false)\r\n\r\n    const handleMouseDown = () => {\r\n      setResetColor(!resetColor)\r\n    };\r\n  \r\n    const handleMouseUp = () => {\r\n      setResetColor(!resetColor)\r\n    };\r\n\r\n\r\n\r\n    // FIX THIS [Spinning Thing]\r\n    const resetChallenges = async () => {\r\n      // setIsDataLoading(true);\r\n      const challengeTableData = await RenderDatabase();\r\n      // setIsDataLoading(false);\r\n\r\n      setChallengesData(challengeTableData);\r\n      // console.log(challengeTableData)\r\n    };\r\n\r\n\r\n    // FIX THIS : LOCAL STORAGE\r\n    useEffect(() => {\r\n        // Retrieve state variables from localStorage when component mounts\r\n        \r\n        const storedUplandID = JSON.parse(localStorage.getItem('UplandID'));\r\n        if (storedUplandID) {\r\n          setUplandID(storedUplandID);\r\n        }\r\n\r\n        const storedPassword = JSON.parse(localStorage.getItem('Password'));\r\n        if (storedPassword) {\r\n          setPassword(storedPassword);\r\n        }\r\n\r\n        console.log(storedUplandID)\r\n        \r\n        if (storedUplandID) {\r\n          handleLogin()\r\n        }\r\n\r\n    }, []); // Empty dependency array to run only once on mount\r\n\r\n    useEffect(() => {\r\n        // Store state variables in localStorage when component unmounts\r\n        \r\n        localStorage.setItem('UplandID', JSON.stringify(uplandID));\r\n        localStorage.setItem('Password', JSON.stringify(password));\r\n        \r\n    }, [uplandID, password]);\r\n    \r\n    // FIX THIS ^\r\n\r\n    \r\n    return (\r\n      <>\r\n        <div className='userSection'>\r\n          <div className='userButtons'>\r\n\r\n            {/* PROFILE AND CHALLENGE BUTTONS */}\r\n            <div style={{marginRight: '3%'}}>\r\n              <button onClick={openCreateProfileModal} className='createProfButton'>\r\n                Create Profile\r\n              </button>\r\n                \r\n              {LogoutButton ? (\r\n                <button onClick={Logout} className='logButton'>\r\n                  Logout\r\n                </button>\r\n              ) : (\r\n                <button onClick={openLoginModal} className='logButton'>\r\n                  Login\r\n                </button>\r\n              )}\r\n              \r\n              <SubmitChallenge finalUserUplandID={currentUserUplandID} setLoginOpen = {setLoginOpen} setCreateOpen = {setCreateOpen} setIsGenerate={setIsGenerate} setChallengeOpen={setChallengeOpen} isChallengeOpen={isChallengeOpen}/>\r\n\r\n              {isLoginOpen && (\r\n                <div className='modal modalUser modalLogin'>\r\n                  <span className=\"close\" onClick={closeLoginModal}>&times;</span>\r\n                  <div className='smallHeader'> Login </div>\r\n                  <br/>\r\n                  \r\n                  <label htmlFor=\"login-username\">Upland ID: </label>\r\n                  <input type=\"text\" id=\"login-username\" value={uplandID} className='user-input' onChange={(e) => setUplandID(e.target.value)} />\r\n                  <br />\r\n                  \r\n                  <label htmlFor=\"login-password\">Password: </label>\r\n                  <input type=\"password\" id=\"login-password\" value={password} className='user-input' onChange={(e) => setPassword(e.target.value)} />\r\n                  <br />\r\n                  \r\n                  <button onClick={handleLogin} className='submitButton' >Submit</button>\r\n                </div>\r\n              )}    \r\n\r\n              {isCreateOpen && (\r\n                <div className='modal modalUser modalCreate'>\r\n                  <span className=\"close\" onClick={closeCreateProfileModal}>&times;</span>\r\n                  \r\n                  <div className='smallHeader'> Create Profile </div>\r\n                  <br /> \r\n\r\n                  <div style={{display: 'flex'}}>\r\n                    <div className=\"highlightedText\" style={{marginRight: '20px'}}> \r\n                      FIRST SIGN IN ON UPLAND WITH THIS AUTH KEY: \r\n                    </div>\r\n                    \r\n                    {isGenerate ? (\r\n                      <button onClick={getAuthCode} className=\"generateButton\"> Generate Code </button>\r\n                    ) : (\r\n                      <div className=\"highlightedText highlight\"> {authKey} </div>\r\n                    )}\r\n                  </div>\r\n                  <br />         \r\n                  \r\n                  <label className=' important' htmlFor=\"create-username\">Upland ID: </label>\r\n                  <input type=\"text\" id=\"create-username\" value={uplandID} className='user-input' onChange={(e) => setUplandID(e.target.value)} />\r\n                  <br />\r\n                    \r\n                  <div style={{display: 'inline-flex', alignItems: 'center'}}>\r\n                    <label className='important' htmlFor=\"create-username\">Lichess ID:</label>\r\n                    <input type=\"text\" id=\"create-lichess\" value={lichessID} className='user-input' onChange={(e) => setLichessID(e.target.value)} />\r\n                      \r\n                    <HoverPopup text=\r\n                      \"👈👈 If you want to change your LichessID, reach @icebear120 for help\"\r\n                    >\r\n                      <div className='infoBox' htmlFor=\"create-username\" style={{marginLeft: '25px'}}>\r\n                        *Replace?\r\n                      </div>\r\n                    </HoverPopup>\r\n                  </div>\r\n                  <br />\r\n\r\n                  <label className=' important' htmlFor=\"create-password\">Password: </label>\r\n                  <input type=\"password\" id=\"create-password\" value={password} className='user-input' onChange={(e) => setPassword(e.target.value)} />\r\n                  <br />\r\n                  \r\n                  <span style={{justifyContent: 'space-between', display: 'flex'}}>\r\n                    <button onClick={handleCreateProfile} className=\"submitButton\"> Submit </button>\r\n                    <button onClick={deleteProfile} className=\"deleteButton\"> DELETE PROFILE </button>\r\n                  </span>\r\n\r\n                  <DeleteProfileModal  \r\n                    isDeleteOpen={isDeleteOpen}\r\n                    setIsDeleteOpen={setIsDeleteOpen}\r\n                    uplandID={uplandID}\r\n                    setUplandID={setUplandID}\r\n                    password={password}\r\n                    setPassword={setPassword}\r\n                  />\r\n\r\n                </div>\r\n              )}\r\n            </div>\r\n            \r\n\r\n            {/* USER DETAILS */}\r\n            <div style={{marginRight: '20%', justifyContent: 'space-between'}}>\r\n              <UserDetails\r\n                currentUserUplandID={currentUserUplandID}\r\n                currentUserLichessID={currentUserLichessID}\r\n              />\r\n            </div>\r\n\r\n\r\n            {/* RESET BUTTON */}\r\n            <div>\r\n              <button \r\n                onClick={resetChallenges}\r\n                onMouseDown={handleMouseDown}\r\n                onMouseUp={handleMouseUp}\r\n                style={{ backgroundColor: resetColor ? '#005c00' : ''}}\r\n                className='resetButton'\r\n              >\r\n                Reset\r\n              </button>              \r\n            </div>\r\n\r\n          </div>          \r\n        </div>\r\n\r\n\r\n        {CreateError === \"same\" && (\r\n          <div className={`notification notification-error`}>\r\n            This is already your lichess profile!  \r\n          </div>\r\n        )}\r\n\r\n        {CreateError === \"no profile found\" && (\r\n          <div className={`notification notification-error`}>\r\n            Your UplandID is not on our record. PLEASE MAKE SURE TO AUTHENTICATE FIRST        \r\n          </div>\r\n        )}\r\n\r\n        {profileCreated === \"success\" && (\r\n          <div className={`notification notification-success`}>\r\n            Profile Created!\r\n          </div>\r\n        )}\r\n\r\n        {profileCreated === \"success\" && (\r\n          <div className={`notification notification-success`}>\r\n            Profile Created!\r\n          </div>\r\n        )}\r\n\r\n        {profileCreated === \"replaced\" && (\r\n          <div className={`notification notification-success`}>\r\n            Lichess ID has been replaced!\r\n          </div>\r\n        )}\r\n\r\n        {profileCreated === \"wrong password\" && (\r\n          <div className={`notification notification-error`}>\r\n            Can't replace Lichess ID! You need to enter the right password!\r\n          </div>\r\n        )}\r\n\r\n        {LoginError && (\r\n          <div className={`notification notification-error`}>\r\n            Incorrect UplandID or Password\r\n          </div>\r\n        )}  \r\n\r\n        {loggedInNotif && (\r\n          <div className={`notification notification-success`}>\r\n            Logged In!\r\n          </div>\r\n        )}\r\n\r\n        {LichessError === \"invalid lichess\" && (\r\n          <div className={`notification notification-error`}>\r\n            Can't replace LichessID! If you need to change, DM @icebear120 on discord for help\r\n          </div>\r\n        )}\r\n\r\n      </>\r\n    )\r\n  }\r\n  \r\n  \r\n  export {UserSection}","import React, { useState } from 'react';\r\n\r\nimport './../App.css'\r\n\r\n\r\nconst ToggleBar = () => {\r\n    const [infosection, setInfoSection] = useState(false);\r\n    \r\n    const toggleInfoSection = () => setInfoSection(!infosection);\r\n    \r\n    return (\r\n        <div className={\"toggleInfoSection\"} onClick={toggleInfoSection}>\r\n            {!infosection ? (\r\n                <div className=\"toggleText\">\r\n                <span >\r\n                    CLICK FOR IMPORTANT INFO!!\r\n                </span>\r\n                <span className=\"close\" aria-label=\"Down Arrow\" role=\"img\">⬇️</span>\r\n                </div>\r\n            ) :\r\n                <div>\r\n                <span className=\"close\" aria-label=\"Up Arrow\" role=\"img\">⬆️</span>\r\n                \r\n                <span className=\"warning\">**</span>\r\n                If your chess challenge expires, HIT DELETE and it will be removed from the list and you'll be refunded\r\n                <span className=\"warning\">**</span>\r\n                <br />\r\n                <span className=\"warning\">WARNING:</span>\r\n                If you confirmed through Upland you want to accept a challenge, even if you CANCEL, you won't get your money back!!\r\n                <br />\r\n                <br />\r\n                <span className=\"important\">Important:</span>\r\n                <br />\r\n                YOU MUST HAVE A LICHESS ACCOUNT AND BE LOGGED IN BEFORE YOU ACCEPT OR JOIN A CHESS CHALLENGE!\r\n                <br />\r\n                Otherwise, wagers cannot be resolved to your Upland account. If that happens, just ask your opponent to delete the challenge and start a new one. Lichess won't allow player interchange midway through the game\r\n                <br />\r\n                <br />\r\n                CHALLENGE MUST BE MARKED AS \"ACCEPTED\" & NOT \"AVAILABLE\" IN ORDER FOR WAGERS TO BE RESOLVED\r\n                </div>\r\n            }\r\n        </div>\r\n    )   \r\n};  \r\n\r\nexport {ToggleBar}","import React, { useState, useEffect } from 'react';\r\nimport '../App.css'\r\n\r\nimport { ChessChallengesTable } from '../Sections/Database.js'\r\nimport { RenderDatabase } from '../Helpers/RenderDatabase.js';\r\nimport { UserSection } from '../Sections/Login.js';\r\nimport { ToggleBar } from '../Sections/ToggleInfoBar.js';\r\n\r\n\r\nconst MainPage = () => {\r\n  const [challengeData, setChallengesData] = useState([]);\r\n  const [finalUserUplandID, setFinalUserUplandID] = useState('BLANK'); // Lift state up\r\n  \r\n\r\n  useEffect(() => {\r\n    resetChallenges();\r\n  }, []);\r\n\r\n  const resetChallenges = async () => {\r\n    console.log(\"RESET\")\r\n\r\n    const challengeTableData = await RenderDatabase();\r\n    setChallengesData(challengeTableData);\r\n\r\n    // console.log(challengeTableData)\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <header>\r\n        <div> <h2 className=\"title\">UPLAND CHESS</h2> </div>\r\n        <div className=\"author-info\">by dogeyboy19 </div>\r\n      </header>\r\n\r\n      <ToggleBar/>\r\n\r\n      <UserSection setFinalUserUplandID={setFinalUserUplandID} setChallengesData={setChallengesData}/>\r\n\r\n      <ChessChallengesTable challenges={challengeData} currentUserUplandID={finalUserUplandID}  />\r\n    </>\r\n  );\r\n};\r\n\r\nexport {MainPage};","import React, { useState, useEffect } from 'react';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\nimport {BASE_URL as baseUrl} from \"../FIXED_FRONTEND_VARIABLES\"\r\nimport '../App.css';\r\n\r\n\r\nconst LichessPage = () => {\r\n  const navigate = useNavigate();\r\n  const { state } = useLocation();\r\n\r\n  const [stats, setStats] = useState('');\r\n  const [deviation, setDeviation] = useState('');\r\n  const [rating, setRating] = useState('');\r\n  const [games, setGames] = useState('');\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    if (state?.lichessId) {\r\n      // console.log(state?.lichessId)\r\n      regenerateStats();\r\n    }\r\n\r\n    // if (state?.currentUserUplandID){\r\n    //   console.log(\"HERE\")\r\n    //   console.log(state?.currentUserUplandID)\r\n    // }\r\n  }, []);\r\n\r\n\r\n\r\n  const regenerateStats = async () => {\r\n    try {\r\n      const response = (await axios.post(baseUrl + '/getLichessInfo', { lichessId: state?.lichessId}));\r\n\r\n      const lichessData = response.data;\r\n\r\n      setStats(lichessData);\r\n      setRating(lichessData.rating);\r\n      setGames(lichessData.games);\r\n\r\n      let dev = (lichessData.rd < 100) ? \"LOW\" : \"HIGH\"\r\n      setDeviation(dev);\r\n\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n  };\r\n\r\n\r\n  const handleBackToHome = () => {\r\n    navigate('/');\r\n  };\r\n\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <button onClick={handleBackToHome}> Back to Home </button>\r\n\r\n      <h1 className=\"smallHeader\">VIEWING PLAYER: {state?.lichessId || 'No input value provided'}</h1>\r\n      \r\n      {stats && (\r\n        <div style={{display:\"inline\"}}>\r\n            \r\n          <p className=\"smallHeader accepted\">\r\n            <p className=\"textOutliner completed\"> Rating: {rating} </p>\r\n            <p className=\"textOutliner available\"> Rated Games: {games} </p>\r\n            <p className=\"textOutliner ready\"> Deviation: {deviation} </p>\r\n          </p>\r\n        </div>\r\n      )}\r\n      \r\n      <button onClick={regenerateStats} className=\"submitButton\">\r\n        Regenerate\r\n      </button>\r\n      \r\n    </div>\r\n  );\r\n};\r\n\r\nexport { LichessPage };","// EscrowPage.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\nimport {BASE_URL as baseUrl} from \"../FIXED_FRONTEND_VARIABLES\"\r\nimport '../App.css';\r\n\r\nconst EscrowPage = () => {\r\n  const navigate = useNavigate();\r\n  const { state } = useLocation();\r\n\r\n  const [escrow, setEscrow] = useState([]);\r\n  const [assets, setAssets] = useState([]);\r\n  const [status, setStatus] = useState('');\r\n  const [upx, setUpx] = useState('');\r\n\r\n\r\n  const handleBackToHome = () => {\r\n    navigate('/');\r\n  };\r\n\r\n\r\n  useEffect(() => {\r\n    if (state?.escrowId) {\r\n      regenerateEscrow();\r\n    }\r\n\r\n    // if (state?.currentUserUplandID){\r\n    //   console.log(\"HERE\")\r\n    //   console.log(state?.currentUserUplandID)\r\n    // }\r\n  }, []);\r\n\r\n\r\n  const regenerateEscrow = async () => {\r\n    try {\r\n      const response = await axios.post(baseUrl + '/getEscrow', { escrowId: state?.escrowId});\r\n\r\n      const escrowData = response.data;\r\n\r\n      setEscrow(escrowData);\r\n      setAssets(escrowData.assets);\r\n      setStatus(escrowData.status);\r\n      setUpx(escrowData.upx);\r\n    \r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n  };\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <button onClick={handleBackToHome}> Back to Home </button>\r\n\r\n      <h1 className=\"smallHeader\">VIEWING ESCROW: {state?.escrowId || 'No input value provided'}</h1>\r\n      \r\n      {escrow && (\r\n        <div style={{display:\"inline\"}}>\r\n            \r\n          <p className=\"textOutliner accepted\">\r\n            <p className=\"textOutliner completed\"> UPX: {upx} </p>\r\n            <p className=\"textOutliner available\"> Status: {status} </p>\r\n          </p>\r\n          \r\n\r\n          <table>\r\n            <thead>\r\n                <tr>\r\n                    <th colSpan=\"3\" className=\"textOutliner ready\"> ASSETS </th>\r\n                </tr>\r\n                \r\n                <tr>\r\n                    <th>Amount</th>\r\n                    <th>Owner EOS ID</th>\r\n                    <th>Status</th>\r\n                </tr>\r\n            </thead>\r\n            \r\n            {assets && (\r\n              <tbody>\r\n                {assets.map((asset, index) => (\r\n                  <tr key={index}>\r\n                    <td>{asset.amount}</td>\r\n                    <td>{asset.ownerEosId}</td>\r\n                    <td>{asset.status}</td>\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            )}\r\n          </table>\r\n        \r\n        </div>\r\n      )}\r\n      \r\n      <button onClick={regenerateEscrow} className=\"submitButton\">\r\n        Regenerate\r\n      </button>\r\n      \r\n    </div>\r\n  );\r\n};\r\n\r\nexport { EscrowPage };","import React from 'react';\r\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\r\n\r\nimport { MainPage } from './Pages/MainPage';\r\nimport { LichessPage } from './Pages/LichessInfo';\r\nimport { EscrowPage } from './Pages/EscrowInfo';\r\n\r\nconst App = () => {\r\n  return (\r\n    <Router>\r\n      <div>\r\n        <Routes>\r\n          <Route path=\"/\" element={<MainPage />} />\r\n          <Route path=\"/lichess\" element={<LichessPage />} />\r\n          <Route path=\"/escrow\" element={<EscrowPage />} />\r\n        </Routes>\r\n      </div>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport App from './App';\r\n// import reportWebVitals from './reportWebVitals';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n// app.use(express.static(path.resolve(__dirname, '../client/build')));\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n// reportWebVitals();\r\n"],"sourceRoot":""}