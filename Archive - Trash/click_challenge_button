# # import Upland.join_escrow_container

# # from Chess.FIXED_CHESS_VARIABLES import client

# from Chess.FIXED_CHESS_VARIABLES import cfilepath
# from Upland.FIXED_VARIABLES import filepath

# from Chess.create_open_challenge import CreateOpenChallenge
# from Chess.append_challenge import AppendChallenge
# # from chess_game_winner import GameWinner
# from openpyxl import load_workbook
# from Upland.join_escrow_container import JoinEscrow
# from Upland.get_bearer_token import GetBearerToken
# from Chess.query_for_uplandID import QueryForUplandID
# from Chess.query_challenge_idx import GetChallengeIdx
# from Upland.get_escrow_container import GetEscrowContainer
# import pandas as pd


# # FRONTEND DEPENDENT

# workbook1 = load_workbook(cfilepath)
# chessWorksheet = workbook1['Sheet']

# workbook2 = load_workbook(filepath)
# uplandWorksheet = workbook2['Sheet']


# def challengeButtonClicked(uplandID_, rated_, wager_):

#     # print("START")

#     # First check if user is valid...check the uplandDatabase if his profile exists <- This should always be true...
#     # if you create a profile to join the game, your profile should be in there

#     ############################
#     # INSTRUCTION
#     # While loop (while challenge not valid or cancel button isn't clicked pop up shows)
#     # Display popup to extract all parameters

#     challenger = "trashboatsr"  # <- Need to extract this detail on front end
#     speed = "rapid"  # <- Placeholder
#     increment = 0  # <- Placeholder
#     rated = rated_   # <- Placeholder
#     variant = "standard"  # <- Placeholder
#     name = ("Challenge by ", uplandID_)  # <- Placeholder
#     wager = wager_  # <- Placeholder [wager must be less than challenger balance...otherwise]

#     # valid = isChallengeValid(challenger, wager) Queries upland ID and checks balance if wager < balance (it is valid)
#     ############################

#     # print("here")
#     # df = pd.read_excel(cfilepath)
#     # print(df)

#     # Challenge under terms is created
#     thisGame = CreateOpenChallenge(challenger=challenger, speed=speed, increment=increment, variant=variant,
#                                    rated=rated, name=name)

#     # Challenge is appended to spreadsheet (database) + Escrow is created & appended + Challenge ID is extracted
#     gameID = AppendChallenge(challenger, wager, thisGame)

#     # print(thisGame)
#     # print("here")

#     # df = pd.read_excel(cfilepath)
#     # print(df)

#     # print(challenger)


#     # Join Escrow Container of this game
#     uplandID = QueryForUplandID(challenger)
#     bearer = GetBearerToken(uplandID)

#     # print(uplandID)
#     # print(bearer)

#     # If bearer is -1, that means the Upland profile was somehow not added. <- This should never happen

#     challengeIdx = GetChallengeIdx(gameID)
#     # print(challengeIdx)

#     df1 = pd.read_excel(filepath)
#     # print(df1)

#     # print(chessWorksheet[1][0].value)

#     # print("THERE")
#     # print(chessWorksheet.max_row + 1)

#     workbook9 = load_workbook(cfilepath)
#     chessWorksheet1 = workbook9['Sheet']

#     # print(chessWorksheet1[challengeIdx][3].value)

#     eid = str(chessWorksheet1[challengeIdx][5].value)
#     # eid = int(eid)

#     # print("BREAK")

#     # print(eid)
#     # print(wager)
#     # print(bearer)

#     wager = int(wager)
#     # print(eid)

#     JoinEscrow(bearer, eid, wager)

#     print(GetEscrowContainer(eid))

    

#     # POP-UP THAT DISPLAYS (GO TO UPLAND ACCOUNT TO ACCEPT WAGER TRANSACTION)
#     # User must hit reset button for updates

#     ############################
#     # INSTRUCTION
#     # On front end, there is a database...(render challengemap spreadsheet)
#     # Add challenger name + challenger rating + link in game variable
#     ############################