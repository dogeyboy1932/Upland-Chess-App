// import React, { useState, useEffect } from 'react';
// import axios from 'axios';

// // const ChessChallengesTable = ({ challenges, currentUserUplandID}) => {
// const ChessChallengesTable = ({ challenges}) => {
//   const [acceptedChallenge, setAcceptedChallenges] = useState([]);
//   const [hasAcceptedChallenge, setHasAcceptedChallenge] = useState(false);
  
//   const AcceptChallenge = async (link, index) => {
//     window.open(link, '_blank');
//     setAcceptedChallenges([...acceptedChallenge, index]);
    
//     try {
//       const response = await axios.post('/accepted', {
//         link
//       });
//       setHasAcceptedChallenge(true);

//       console.log("ACCEPTED 1")
//       console.log(response)

//       challenges = response;

//     } catch (error) {
//       console.error('Error:', error);
//     }
//   };

//   const CancelChallenge = async (link, index) => {
//     setAcceptedChallenges(acceptedChallenge.filter((acceptedIndex) => acceptedIndex !== index));

//     try {
//       await axios.post('/cancel', { link });
//       setHasAcceptedChallenge(false);

//     } catch (error) {
//       console.error('Error:', error);
//     }
//   };

//   const DeleteChallenge = async (link) => {
//     // Implement the logic to delete the challenge
//     try {
//       await axios.post('/delete', { link });
//       setHasAcceptedChallenge(true);
//       // Update the state or take any other action as needed
//     } catch (error) {
//       console.error('Error:', error);
//     }
//   };

//   return (
//     <table
//       style={{
//         borderCollapse: 'collapse',
//         width: '100%',
//         textAlign: 'center',
//         border: '3px solid #3498db',
//       }}
//     >
//       <thead>
//         <tr>
//           <th style={{ border: '3px solid #3498db', padding: '10px' }}>Challenge</th>
//           <th style={{ border: '3px solid #3498db', padding: '10px' }}>Upland ID</th>
//           <th style={{ border: '3px solid #3498db', padding: '10px' }}>Lichess ID</th>
//           <th style={{ border: '3px solid #3498db', padding: '10px' }}>Lichess Rating</th>
//           <th style={{ border: '3px solid #3498db', padding: '10px' }}>Wager Amount</th>
//           <th style={{ border: '3px solid #3498db', padding: '10px' }}>Link</th>
//           <th style={{ border: '3px solid #3498db', padding: '10px' }}>Accept Challenge</th>
//         </tr>
//       </thead>
//       <tbody>
//         {challenges.map((challenge, index) => (
//           <tr
//             key={index}
//             style={{
//               backgroundColor: index % 2 === 0 ? '#f2f2f2' : '#ffffff',
//               borderBottom: '1px solid #3498db', // Border for each row
//             }}
//           > 
//             <td style={{ padding: '10px', borderRight: '2px solid #3498db', borderBottom: '2px solid #3498db' }}>{challenge.name}</td>           
//             <td style={{ padding: '10px', borderRight: '2px solid #3498db', borderBottom: '2px solid #3498db' }}>{challenge.uplandID}</td>
//             <td style={{ padding: '10px', borderRight: '2px solid #3498db', borderBottom: '2px solid #3498db' }}>{challenge.lichessID}</td>
//             <td style={{ padding: '10px', borderRight: '2px solid #3498db', borderBottom: '2px solid #3498db'}}>{challenge.opponentRating}</td>
//             <td style={{ padding: '10px', borderRight: '2px solid #3498db', borderBottom: '2px solid #3498db' }}>{challenge.wageramt}</td>
//             <td style={{ padding: '10px', borderRight: '2px solid #3498db', borderBottom: '2px solid #3498db' }}>
//               <a href={challenge.link} target="_blank" rel="noopener noreferrer">
//                 {challenge.link}
//               </a>
//             </td>
//             {/* <td style={{ padding: '10px', borderRight: '2px solid #3498db', borderBottom: '2px solid #3498db' }}>
//               {!acceptedChallenge.includes(index) && !challenge.accepted ? (
//                 <button
//                   onClick={() => AcceptChallenge(challenge.link, index)}
//                   style={{backgroundColor: '#3498db', color: '#fff', padding: '5px 10px', border: 'none', cursor: 'pointer'}}
//                 >
//                   Accept
//                 </button>
//               ) : ( // FIX THIS
//                 <button onClick={() => CancelChallenge(challenge.link)} style={{ backgroundColor: 'red', color: '#fff', padding: '5px 10px', border: 'none', cursor: 'pointer' }}>
//                   Cancel
//                 </button>
//               )}
//             </td> */}
//             <td style={{ padding: '10px', borderRight: '2px solid #3498db', borderBottom: '2px solid #3498db' }}>
//               {!acceptedChallenge.includes(index) && !challenge.accepted && (
//                 <button
//                   onClick={() => AcceptChallenge(challenge.link, index)}
//                   style={{backgroundColor: '#a52a2a', color: '#fff', padding: '5px 10px', border: 'none', cursor: 'pointer'}}
//                 >
//                   Accept
//                 </button>
//               )}

//               {/* {acceptedChallenge.includes(index) || challenge.accepted && (
//                 <button 
//                   onClick={() => CancelChallenge(challenge.link, index)} 
//                   style={{ backgroundColor: '#3498db', color: '#fff', padding: '5px 10px', border: 'none', cursor: 'pointer' }}
//                 >
//                   Cancel
//                 </button>
//               )} */}

//               {challenge.accepted && 
//               // currentUserUplandID === challenge.uplandID  && 
//               (
//                 <button
//                   onClick={() => DeleteChallenge(challenge.link, index)}
//                   style={{ backgroundColor: 'red', color: '#fff', padding: '5px 10px', border: 'none', cursor: 'pointer' }}
//                 >
//                   Delete
//                 </button>
//               )}

//               {challenge.accepted &&
//               // && currentUserUplandID !== challenge.uplandID 
//               (
//                 <button 
//                   onClick={() => CancelChallenge(challenge.link, index)} 
//                   style={{ backgroundColor: '#8a2be6', color: '#fff', padding: '5px 10px', border: 'none', cursor: 'pointer' }}
//                 >
//                   Cancel
//                 </button>
//               )}

//             </td>
//             <td style={{ padding: '10px', borderRight: '2px solid #3498db', borderBottom: '2px solid #3498db' }}>{challenge.accepted.toString()}</td>
//           </tr>
//         ))}
//       </tbody>
//     </table>
//   );
// };  


// const submitDetails = async (rated, wager, upland) => {
//   console.log("Called 3")
//   try {
//     console.log("CALLED 3")
//     const response = await axios.post('/submit-details', {
//       rated, 
//       wager,
//       upland
//     });

//     if (response.status === 200) {
//       console.log('Details submitted successfully');
//     }
    
//     return response
//   } catch (error) {
//     console.error('Error:', error);
//   }
// };


// const challengeDatabase = async () => {
//   try {
//       const response = await axios.post('/database');
//       console.log("RESET BUTTON CLICKED")
//       console.log(response)
      
//       return response.data.array;
//   } catch (error) {
//       console.error('Error processing button click:', error);
//   }
// };




 
// const App = () => {
//   const [isModalOpen, setModalOpen] = useState(false);
//   const [rated, setRated] = useState('');
//   const [wager, setWager] = useState('');
//   const [uplandID, setUpland] = useState('');
//   const [success, setSuccess] = useState(false);
//   const [inputValue, setInputValue] = useState('');
//   const [currentUserUplandID, setCurrentUserUplandID] = useState('BLANK');


//   const openModal = () => {
//     setModalOpen(true);
//     setSuccess(false);
//   };

//   const closeModal = () => {
//     setModalOpen(false);
//   };

//   const handleInputChange = (e) => {
//     setInputValue(e.target.value);
//   };
  
//   const saveVariable = async () => {
//     setCurrentUserUplandID(inputValue);
//     console.log('Variable saved:', inputValue);
//   };

//   const handleDetailsSubmit = async () => {
//     console.log("CALLED1")
//     console.log(rated.toString())
//     console.log(wager.toString())
//     console.log(uplandID.toString())
//     const response = await submitDetails(rated, wager, uplandID);

//     if (response.status === 200) {
//       closeModal();
//       setSuccess(true);
//       setTimeout(() => setSuccess(false), 5000);
//     }
//   };

//   const challenge_data1 = challengeDatabase();
//   const [challengeTable, setChallengeTable] = useState(null);
  
//   useEffect(() => {
//       challenge_data1.then(challengeTableData => {
//       setChallengeTable(challengeTableData);
//     });
//   }, []); 


//   const challenge_data2 = []

//   if (challengeTable != null) {
//     for (let i = 0; i < challengeTable.length; i++) {
//       let data = {
//         name: 'Challenge ' + (i + 1),
//         link: challengeTable[i][3],
//         opponentRating: challengeTable[i][1],
//         uplandID: challengeTable[i][4],
//         lichessID: challengeTable[i][0],
//         wageramt: challengeTable[i][2],
//         accepted: challengeTable[i][5]
//       }

//       challenge_data2.push(data)
//     }
//   }

//   // const [refreshInterval, setRefreshInterval] = useState(30000); // Set the interval in milliseconds (e.g., 30 seconds)

//   // useEffect(() => {
//   //   const intervalId = setInterval(() => {
//   //     // Trigger the function that fetches your data or any other action you want to perform on refresh
//   //     // For example, you can call your challengeDatabase function
//   //     challengeDatabase().then(challengeTableData => {
//   //       setChallengeTable(challengeTableData);
//   //     });
//   //   }, refreshInterval);

//   //   // Clear the interval when the component is unmounted to avoid memory leaks
//   //   return () => clearInterval(intervalId);
//   // }, [refreshInterval]); 
    

//   return (
//     <>
//       <div style={{ textAlign: 'center', margin: '10px' }}>
//         <h1 style={{ color: '#333', marginBottom: '0' }}>UPLAND CHESS</h1>
//         <h4 style={{ color: '#333', marginTop: '0' }}>by dogeyboy19</h4>
//         <h6 style={{ color: '#333', marginTop: '0' }}>**If your chess challenge expires, it will be removed from the list and you'll be refunded**</h6>
//         <h6 style={{ color: '#333', marginTop: '0' }}>**If you accept a challenge: MAKE SURE TO GO TO UPLAND ACCOUNT TO ACCEPT WAGER TRANSACTION**</h6>
//         <h6>After that, there's no going back!!**</h6>
        
//         <div style={{ margin: '10px' }}>
//           <span style={{ margin: '5px' }}></span>
//           <button onClick={challengeDatabase}>Reset</button>
//         </div>
//         <div style={{ margin: '20px' }}>
//           <label>
//             Enter Upland ID:
//             <input type="text" value={inputValue} onChange={handleInputChange} />
//           </label>
//           <button onClick={saveVariable}>Save</button>
//         </div>
//         <div>
//           {currentUserUplandID}
//         </div>
//       </div>

//       <div>
//         <ChessChallengesTable challenges={challenge_data2} currentUserUplandID={currentUserUplandID}/>
//       </div>
    
//       <div style={{ textAlign: 'center', margin: '10px' }}>
//         <button 
//         onClick={openModal}
//         style={{ backgroundColor: '#3498db', color: '#fff', padding: '10px', border: 'none', cursor: 'pointer' }}
//         >
//           CREATE CHALLENGE
//         </button>

//         {isModalOpen && (
//           <div className="modal">
//             <span className="close" onClick={closeModal}>&times;</span>
//             <h2>Enter Details</h2>
//             <label htmlFor="name">Upland ID? </label>
//             <input type="text" id="wager" value={uplandID} onChange={(e) => setUpland(e.target.value)} />
//             <br />
//             <label htmlFor="name">Rated? </label>
//             <input type="text" id="name" value={rated} onChange={(e) => setRated(e.target.value)} />
//             <br />
//             <label htmlFor="name">Wager? </label>
//             <input type="text" id="wager" value={wager} onChange={(e) => setWager(e.target.value)} />
//             <br />
//             <button onClick={handleDetailsSubmit}>Submit</button>
//           </div>
//         )}
        
//         {success && (
//             <div className="success-popup" style={{ backgroundColor: '#2ecc71', color: '#fff', padding: '10px', margin: '10px', borderRadius: '5px' }}>
//               Challenge Submitted!
//             </div>
//         )}
//       </div>        
//     </>
//   );
// };


// export default App;
